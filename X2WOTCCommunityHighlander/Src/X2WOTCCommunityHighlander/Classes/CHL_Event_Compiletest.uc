// Do not manually edit! This class is automatically generated by `make_docs.py`.
// It tests that the event listener templates generated by the docs script actually compile.
// Run the `makeDocs` task (or run the script manually) to refresh.
class CHL_Event_Compiletest extends Object;

static function EventListenerReturn OnCovertAction_OverrideCostScalar(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_CovertAction ActionState;
	local XComLWTuple Tuple;
	local float DefaultCostScalar;
	local XComGameState_Reward RewardState;

	ActionState = XComGameState_CovertAction(EventSource);
	Tuple = XComLWTuple(EventData);

	DefaultCostScalar = Tuple.Data[0].f;
	RewardState = XComGameState_Reward(Tuple.Data[1].o);

	// Your code here

	Tuple.Data[0].f = DefaultCostScalar;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnCovertAction_OverrideRewardScalar(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_CovertAction ActionState;
	local XComLWTuple Tuple;
	local float DefaultRewardScalar;
	local XComGameState_Reward RewardState;

	ActionState = XComGameState_CovertAction(EventSource);
	Tuple = XComLWTuple(EventData);

	DefaultRewardScalar = Tuple.Data[0].f;
	RewardState = XComGameState_Reward(Tuple.Data[1].o);

	// Your code here

	Tuple.Data[0].f = DefaultRewardScalar;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnFirstPromotionOverrideClass(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit FirstSquaddie;
	local XComLWTuple Tuple;
	local name SoldierClassTemplateName;

	FirstSquaddie = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	SoldierClassTemplateName = Tuple.Data[0].n;

	// Your code here

	Tuple.Data[0].n = SoldierClassTemplateName;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnGeoscape_ResInfoButtonVisible(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local UIStrategyMap_HUD HUDScreen;
	local XComLWTuple Tuple;
	local bool ShouldShow;
	local bool InFlight;

	HUDScreen = UIStrategyMap_HUD(EventSource);
	Tuple = XComLWTuple(EventData);

	ShouldShow = Tuple.Data[0].b;
	InFlight = Tuple.Data[1].b;

	// Your code here

	Tuple.Data[0].b = ShouldShow;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnGetCovertActionEvents_Settings(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_HeadquartersXCom XComHQ;
	local XComLWTuple Tuple;
	local bool AddAll;
	local bool InsertSorted;

	XComHQ = XComGameState_HeadquartersXCom(EventSource);
	Tuple = XComLWTuple(EventData);

	// Your code here

	Tuple.Data[0].b = AddAll;
	Tuple.Data[1].b = InsertSorted;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOnBestGearLoadoutApplied(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit UnitState;

	UnitState = XComGameState_Unit(EventData);

	// Your code here

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOnGetPCSImage(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComLWTuple Tuple;
	local XComGameState_Item ItemState;
	local string ImagePath;

	Tuple = XComLWTuple(EventData);

	ItemState = XComGameState_Item(Tuple.Data[0].o);

	// Your code here

	Tuple.Data[1].s = ImagePath;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideDarkEventCount(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_HeadquartersAlien AlienHQ;
	local XComLWTuple Tuple;
	local int NumEvents;
	local bool bChosenAddedEvent;

	AlienHQ = XComGameState_HeadquartersAlien(EventSource);
	Tuple = XComLWTuple(EventData);

	NumEvents = Tuple.Data[0].i;
	bChosenAddedEvent = Tuple.Data[1].b;

	// Your code here

	Tuple.Data[0].i = NumEvents;
	Tuple.Data[1].b = bChosenAddedEvent;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideHasAmmoPocket(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit UnitState;
	local XComLWTuple Tuple;
	local bool bHasAmmoPocket;

	UnitState = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	bHasAmmoPocket = Tuple.Data[0].b;

	// Your code here

	Tuple.Data[0].b = bHasAmmoPocket;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideHasExtraUtilitySlot(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit UnitState;
	local XComLWTuple Tuple;
	local bool bHasExtraUtilitySlot;

	UnitState = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	bHasExtraUtilitySlot = Tuple.Data[0].b;

	// Your code here

	Tuple.Data[0].b = bHasExtraUtilitySlot;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideHasGrenadePocket(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit SourceUnit;
	local XComLWTuple Tuple;
	local bool bHasGrenadePocket;

	SourceUnit = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	bHasGrenadePocket = Tuple.Data[0].b;

	// Your code here

	Tuple.Data[0].b = bHasGrenadePocket;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideHasInfiniteAmmo(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Item ItemState;
	local XComLWTuple Tuple;
	local bool bHasInfiniteAmmo;

	ItemState = XComGameState_Item(EventSource);
	Tuple = XComLWTuple(EventData);

	// Your code here

	Tuple.Data[0].b = bHasInfiniteAmmo;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideHitEffects(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComUnitPawn Pawn;
	local XComLWTuple Tuple;
	local bool OverrideHitEffect;
	local float Damage;
	local Actor InstigatedBy;
	local vector HitLocation;
	local name DamageTypeName;
	local vector Momentum;
	local bool bIsUnitRuptured;
	local EAbilityHitResult HitResult;

	Pawn = XComUnitPawn(EventSource);
	Tuple = XComLWTuple(EventData);

	Damage = Tuple.Data[1].f;
	InstigatedBy = Actor(Tuple.Data[2].o);
	HitLocation = Tuple.Data[3].v;
	DamageTypeName = Tuple.Data[4].n;
	Momentum = Tuple.Data[5].v;
	bIsUnitRuptured = Tuple.Data[6].b;
	HitResult = EAbilityHitResult(Tuple.Data[7].i);

	// Your code here

	Tuple.Data[0].b = OverrideHitEffect;
	Tuple.Data[1].f = Damage;
	Tuple.Data[2].o = InstigatedBy;
	Tuple.Data[3].v = HitLocation;
	Tuple.Data[4].n = DamageTypeName;
	Tuple.Data[5].v = Momentum;
	Tuple.Data[6].b = bIsUnitRuptured;
	Tuple.Data[7].i = HitResult;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideMissionImage(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_MissionSite MissionState;
	local XComLWTuple Tuple;
	local string ImagePath;

	MissionState = XComGameState_MissionSite(EventSource);
	Tuple = XComLWTuple(EventData);

	ImagePath = Tuple.Data[0].s;

	// Your code here

	Tuple.Data[0].s = ImagePath;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideNextRetaliationDisplay(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComLWTuple Tuple;
	local bool bShow;
	local string strHeader;
	local string strValue;
	local string strFooter;

	Tuple = XComLWTuple(EventData);

	bShow = Tuple.Data[0].b;
	strHeader = Tuple.Data[1].s;
	strValue = Tuple.Data[2].s;
	strFooter = Tuple.Data[3].s;

	// Your code here

	Tuple.Data[0].b = bShow;
	Tuple.Data[1].s = strHeader;
	Tuple.Data[2].s = strValue;
	Tuple.Data[3].s = strFooter;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideProjectileInstance(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameStateContext_Ability AbilityContext;
	local XComLWTuple Tuple;
	local bool bPreventProjectileSpawning;
	local Actor ProjectileTemplate;
	local AnimNotify_FireWeaponVolley InVolleyNotify;
	local XComWeapon InSourceWeapon;
	local X2Action_Fire CurrentFireAction;
	local XGUnitNativeBase Unit;

	AbilityContext = XComGameStateContext_Ability(EventSource);
	Tuple = XComLWTuple(EventData);

	ProjectileTemplate = Actor(Tuple.Data[1].o);
	InVolleyNotify = AnimNotify_FireWeaponVolley(Tuple.Data[2].o);
	InSourceWeapon = XComWeapon(Tuple.Data[3].o);
	CurrentFireAction = X2Action_Fire(Tuple.Data[4].o);
	Unit = XGUnitNativeBase(Tuple.Data[5].o);

	// Your code here

	Tuple.Data[0].b = bPreventProjectileSpawning;
	Tuple.Data[4].o = CurrentFireAction;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverridePromotionBlueprintTagPrefix(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local UIAfterAction Screen;
	local XComLWTuple Tuple;
	local XComGameState_Unit UnitState;
	local string TagPrefix;

	Screen = UIAfterAction(EventSource);
	Tuple = XComLWTuple(EventData);

	UnitState = XComGameState_Unit(Tuple.Data[0].o);
	TagPrefix = Tuple.Data[1].s;

	// Your code here

	Tuple.Data[1].s = TagPrefix;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverridePromotionUIClass(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComHQPresentationLayer Pres;
	local XComLWTuple Tuple;
	local CHLPromotionScreenType PromotionScreenType;
	local class<UIArmory_Promotion> PromotionUIClass;

	Pres = XComHQPresentationLayer(EventSource);
	Tuple = XComLWTuple(EventData);

	PromotionScreenType = CHLPromotionScreenType(Tuple.Data[0].i);
	PromotionUIClass = class<UIArmory_Promotion>(Tuple.Data[1].o);

	// Your code here

	Tuple.Data[1].o = PromotionUIClass;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideShowItemInLockerList(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Item ItemState;
	local XComLWTuple Tuple;
	local bool bSlotShowItemInLockerList;
	local EInventorySlot Slot;
	local XComGameState_Unit UnitState;

	ItemState = XComGameState_Item(EventSource);
	Tuple = XComLWTuple(EventData);

	bSlotShowItemInLockerList = Tuple.Data[0].b;
	Slot = EInventorySlot(Tuple.Data[1].i);
	UnitState = XComGameState_Unit(Tuple.Data[2].o);

	// Your code here

	Tuple.Data[0].b = bSlotShowItemInLockerList;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnOverrideUnitFocusUI(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit SourceUnit;
	local XComLWTuple Tuple;
	local bool bVisible;
	local int currentFocus;
	local int maxFoxus;
	local string color;
	local string iconPath;
	local string tooltipText;
	local string focusLabel;

	SourceUnit = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	bVisible = Tuple.Data[0].b;
	currentFocus = Tuple.Data[1].i;
	maxFoxus = Tuple.Data[2].i;
	color = Tuple.Data[3].s;
	iconPath = Tuple.Data[4].s;
	tooltipText = Tuple.Data[5].s;
	focusLabel = Tuple.Data[6].s;

	// Your code here

	Tuple.Data[0].b = bVisible;
	Tuple.Data[1].i = currentFocus;
	Tuple.Data[2].i = maxFoxus;
	Tuple.Data[3].s = color;
	Tuple.Data[4].s = iconPath;
	Tuple.Data[5].s = tooltipText;
	Tuple.Data[6].s = focusLabel;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnPreCompleteStrategyFromTacticalTransfer(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	// Your code here

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnPreDarkEventDeactivated(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_DarkEvent EventState;

	EventState = XComGameState_DarkEvent(EventData);

	// Your code here

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnSoldierClassDisplayName(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit UnitState;
	local XComLWTuple Tuple;
	local string DisplayName;

	UnitState = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	DisplayName = Tuple.Data[0].s;

	// Your code here

	Tuple.Data[0].s = DisplayName;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnSoldierClassIcon(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit UnitState;
	local XComLWTuple Tuple;
	local string IconImagePath;

	UnitState = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	IconImagePath = Tuple.Data[0].s;

	// Your code here

	Tuple.Data[0].s = IconImagePath;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnSoldierClassSummary(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit UnitState;
	local XComLWTuple Tuple;
	local string DisplaySummary;

	UnitState = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	DisplaySummary = Tuple.Data[0].s;

	// Your code here

	Tuple.Data[0].s = DisplaySummary;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnSoldierRankIcon(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit UnitState;
	local XComLWTuple Tuple;
	local int Rank;
	local string IconImagePath;

	UnitState = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	Rank = Tuple.Data[0].i;
	IconImagePath = Tuple.Data[1].s;

	// Your code here

	Tuple.Data[1].s = IconImagePath;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnSoldierRankName(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit UnitState;
	local XComLWTuple Tuple;
	local int Rank;
	local string DisplayRankName;

	UnitState = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	Rank = Tuple.Data[0].i;
	DisplayRankName = Tuple.Data[1].s;

	// Your code here

	Tuple.Data[1].s = DisplayRankName;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnSoldierShortRankName(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComGameState_Unit UnitState;
	local XComLWTuple Tuple;
	local int Rank;
	local string DisplayShortRankName;

	UnitState = XComGameState_Unit(EventSource);
	Tuple = XComLWTuple(EventData);

	Rank = Tuple.Data[0].i;
	DisplayShortRankName = Tuple.Data[1].s;

	// Your code here

	Tuple.Data[1].s = DisplayShortRankName;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnUIAvengerShortcuts_ShowCQResistanceOrders(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local UIAvengerShortcuts ShortcutsScreen;
	local XComLWTuple Tuple;
	local bool ShouldShow;

	ShortcutsScreen = UIAvengerShortcuts(EventSource);
	Tuple = XComLWTuple(EventData);

	ShouldShow = Tuple.Data[0].b;

	// Your code here

	Tuple.Data[0].b = ShouldShow;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnUIResistanceReport_ShowCouncil(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComLWTuple Tuple;
	local bool ShouldShow;

	Tuple = XComLWTuple(EventData);

	ShouldShow = Tuple.Data[0].b;

	// Your code here

	Tuple.Data[0].b = ShouldShow;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnUIStrategyPolicy_ShowCovertActionsOnClose(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local XComLWTuple Tuple;
	local bool ShouldShow;

	Tuple = XComLWTuple(EventData);

	ShouldShow = Tuple.Data[0].b;

	// Your code here

	Tuple.Data[0].b = ShouldShow;

	return ELR_NoInterrupt;
}

static function EventListenerReturn OnValidateGTSClassTraining(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackObject)
{
	local UIChooseClass ChooseClassScreen;
	local XComLWTuple Tuple;
	local bool CanTrainClass;
	local X2SoldierClassTemplate SoldierClassTemplate;

	ChooseClassScreen = UIChooseClass(EventSource);
	Tuple = XComLWTuple(EventData);

	SoldierClassTemplate = X2SoldierClassTemplate(Tuple.Data[1].o);

	// Your code here

	Tuple.Data[0].b = CanTrainClass;

	return ELR_NoInterrupt;
}

